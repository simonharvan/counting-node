// When there is a sizeable amount of data on the serial port
// read everything up to the first linefeed

size(480, 400);  // Size must be the first statement
noStroke();

colorMode(HSB, 360, 100, 100);

String splitString[] = new String[1000];
float maxTemp = 0;
float minTemp = 500;
String myString = null;
float[] temps = new float[768];

myString = 
"21.31,16.83,24.44,13.31,20.84,18.02,23.91,15.20,22.59,21.41,32.66,26.74,30.21,30.31,32.81,27.63,27.52,27.09,24.10,18.69,21.11,21.77,23.40,18.58,20.91,22.11,23.58,18.10,20.37,23.13,24.26,18.19,14.62,23.27,14.51,22.97,16.81,22.73,15.83,22.09,18.87,23.98,25.03,31.80,28.82,31.83,27.82,31.47,27.39,26.72,19.49,22.14,20.49,22.06,18.87,22.19,20.24,22.23,18.34,22.18,20.80,22.54,20.16,22.46,19.04,17.03,24.15,15.03,21.70,19.24,24.27,16.84,22.11,21.64,31.74,25.50,29.53,29.34,32.77,27.13,27.85,26.60,24.40,18.85,21.42,22.76,23.90,18.82,21.26,22.67,23.63,18.69,21.31,22.99,24.89,19.71,9.75,22.04,14.25,22.83,17.78,22.96,17.21,22.69,20.28,24.08,24.07,30.77,27.50,30.80,27.52,30.84,26.29,26.04,20.05,22.96,21.36,22.62,19.98,22.58,20.75,22.91,19.33,22.22,21.26,22.82,19.82,23.09,17.41,17.06,23.45,15.30,22.05,20.64,25.07,17.86,23.47,23.84,30.57,25.30,29.44,29.73,32.24,27.21,28.48,28.16,27.44,22.33,22.46,23.40,24.37,19.60,21.00,22.70,23.83,19.30,21.86,23.55,24.59,19.89,13.28,21.46,14.86,22.08,19.10,23.59,18.47,24.27,23.92,28.24,25.99,30.29,28.97,30.97,27.64,30.85,29.00,30.08,26.13,27.88,23.62,24.26,20.75,23.58,21.43,22.90,20.13,22.44,21.33,22.94,19.82,23.47,18.56,18.11,24.01,16.09,22.68,21.30,26.84,22.85,28.26,28.56,31.42,25.89,29.70,29.47,32.54,28.07,29.71,29.32,30.93,27.21,28.02,28.68,25.08,20.31,21.71,22.96,23.77,19.13,21.61,23.55,24.89,19.58,14.52,22.34,16.83,23.21,20.27,24.12,23.50,29.09,26.80,30.36,26.29,29.72,27.45,30.57,29.07,31.34,28.28,30.08,27.54,30.25,28.04,29.29,22.81,23.88,21.41,22.96,20.21,22.66,21.68,23.35,20.07,23.50,20.13,19.03,24.31,17.24,23.17,24.25,31.09,25.36,28.65,28.77,30.94,25.98,28.15,28.41,30.82,26.02,29.08,29.42,30.99,26.62,29.09,30.01,28.17,21.76,22.20,23.23,24.25,19.40,21.60,22.87,24.40,20.26,18.30,23.33,18.74,23.58,21.77,26.60,25.44,29.67,27.19,30.06,26.33,29.24,27.25,28.71,25.97,29.33,27.69,29.38,26.79,29.97,28.16,29.98,25.20,24.90,21.94,23.41,20.72,22.92,21.83,23.68,20.91,23.64,22.56,22.15,25.61,19.11,25.24,26.86,30.79,25.62,28.69,28.48,30.16,25.74,27.94,28.51,29.46,25.79,27.93,28.99,30.85,26.57,28.79,29.86,29.37,23.11,22.47,23.01,24.86,20.18,22.10,23.83,24.99,19.99,20.30,24.25,20.12,24.42,23.66,28.44,25.55,29.70,27.63,29.93,26.54,29.31,26.89,29.11,25.55,28.93,27.48,29.12,27.15,29.84,28.52,29.36,26.23,25.66,22.01,23.21,20.81,24.01,22.50,23.01,20.85,23.52,22.43,22.28,25.07,19.96,24.06,27.39,31.34,26.35,29.42,29.47,30.84,25.83,28.07,28.21,29.50,25.26,28.23,28.34,31.32,27.51,29.80,30.52,29.71,23.84,22.51,23.84,24.30,20.14,21.78,23.90,24.25,19.33,20.99,24.56,20.60,24.07,24.86,26.34,26.83,29.90,28.05,30.29,26.23,29.18,26.87,28.83,25.99,28.77,27.18,29.12,27.76,30.80,29.69,30.52,26.48,25.83,22.57,23.81,21.07,23.52,22.17,23.45,19.73,22.17,22.39,23.47,25.48,21.12,24.12,28.67,31.67,25.62,29.75,29.70,30.73,26.18,28.25,28.39,29.81,25.75,28.42,29.46,31.65,27.97,30.10,30.98,29.23,24.08,22.98,24.06,24.99,19.97,22.42,23.59,24.68,19.89,21.41,24.13,21.96,24.06,26.15,27.30,26.43,31.08,27.69,30.35,26.77,29.23,27.05,28.85,26.26,29.17,27.68,29.45,28.01,30.80,29.66,30.50,26.31,25.38,23.02,23.88,20.39,23.35,22.18,23.15,20.48,23.02,22.91,23.96,25.57,22.68,23.94,28.11,31.37,25.01,29.57,28.72,30.89,26.74,28.00,28.65,29.92,26.33,28.71,29.62,31.21,27.48,30.08,30.99,28.58,23.22,22.18,23.93,24.60,19.59,21.96,24.15,24.73,20.20,22.31,23.54,22.80,24.68,26.58,26.34,25.33,30.93,26.98,30.67,27.40,29.84,27.58,29.13,26.90,29.16,28.14,30.07,27.83,29.88,29.96,30.97,26.12,25.43,23.11,23.54,20.90,23.16,22.14,23.48,20.85,23.63,22.25,24.50,26.23,22.67,24.76,27.68,32.41,24.69,30.41,29.15,31.73,27.02,28.99,29.08,30.45,26.77,29.05,30.40,31.40,27.40,31.08,30.98,28.72,23.82,22.71,23.80,24.97,20.29,21.93,23.47,24.55,19.21,22.94,23.71,22.75,23.88,24.93,26.95,25.62,31.50,26.46,30.84,27.22,30.35,28.37,29.75,26.92,29.88,28.45,30.55,27.89,30.68,30.64,31.15,26.55,25.56,22.69,23.93,20.93,22.90,21.90,23.46,20.12,23.50,23.58,24.97,26.72,21.85,24.56,26.84,31.10,24.36,29.35,29.12,30.60,26.09,27.94,29.02,30.60,26.58,28.93,30.19,32.25,27.82,29.21,30.34,27.69,22.76,22.81,24.00,25.43,20.03,22.29,23.98,24.95,20.49,23.61,26.37,22.60,26.58,24.60,27.64,25.45,29.00,27.25,29.66,25.84,28.49,26.57,28.22,26.07,28.88,27.61,29.87,27.77,30.00,28.55,29.65,25.92,25.70,23.74,24.38,22.06,24.44,23.10,24.63,21.72,23.97,24.31,25.98,28.74,22.35,26.86,28.06,30.51,25.89,28.34,29.52,30.07,26.27,27.97,28.72,29.91,25.82,27.62,29.06,30.08,26.03,27.82,28.46,28.45,23.46,24.37,25.59,25.84,20.42,22.99,24.33,25.02,20.48,23.25,27.13,22.80,27.29,25.93,28.03,25.49,29.54,27.69,29.85,26.21,29.31,28.27,29.52,26.07,29.50,27.19,28.80,26.04,28.25,26.81,27.81,23.96,25.64,23.61,24.65,20.97,23.85,23.04,24.15,20.88,24.04";
// Limit the size of this array so that it doesn't throw
// OutOfBounds later when calling "splitTokens"
if (myString.length() > 4608) {
  myString = myString.substring(0, 4608);
}

// generate an array of strings that contains each of the comma
// separated values
splitString = splitTokens(myString, ",");

// Reset our min and max temperatures per frame
maxTemp = 20;
minTemp = 50;  

// For each floating point value, double check that we've acquired a number,
// then determine the min and max temperature values for this frame
for (int q = 0; q < 768; q++) {

  if (!Float.isNaN(float(splitString[q])) && float(splitString[q]) > maxTemp) {
    maxTemp = float(splitString[q]);
  } else if (!Float.isNaN(float(splitString[q])) && float(splitString[q]) < minTemp) {
    minTemp = float(splitString[q]);
  }
}  

// for each of the 768 values, map the temperatures between min and max
// to the blue through red portion of the color space
for (int q = 0; q < 768; q++) {

  if (!Float.isNaN(float(splitString[q]))) {
    temps[q] = constrain(map(float(splitString[q]), minTemp, maxTemp, 180, 360), 160, 360);
  } else {
    temps[q] = 0;
  }
}



// Prepare variables needed to draw our heatmap
int x = 0;
int y = 0;
int i = 0;
background(0);   // Clear the screen with a black background



while (y < 360) {


  // for each increment in the y direction, draw 8 boxes in the 
  // x direction, creating a 64 pixel matrix
  while (x < 480) {
    // before drawing each pixel, set our paintcan color to the 
    // appropriate mapped color value
    fill(temps[i], 100, 100);
    rect(x, y, 15, 15);
    x = x + 15;
    i++;
  }

  y = y + 15;
  x = 0;
}

// Add a gaussian blur to the canvas in order to create a rough
// visual interpolation between pixels.
filter(BLUR, 7);


// Generate the legend on the bottom of the screen
textSize(32);

// Find the difference between the max and min temperatures in this frame
float tempDif = maxTemp - minTemp; 
// Find 5 intervals between the max and min
int legendInterval = round(tempDif / 5); 
// Set the first legend key to the min temp
int legendTemp = round(minTemp);

// Print each interval temperature in its corresponding heatmap color
for (int intervals = 0; intervals < 6; intervals++) {
  fill(constrain(map(legendTemp, minTemp, maxTemp, 180, 360), 160, 360), 100, 100);
  text(legendTemp+"Â°", 70*intervals, 390);
  legendTemp += legendInterval;
}
